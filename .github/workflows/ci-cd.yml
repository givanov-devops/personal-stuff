name: Ping Application CI/CD Pipeline

on:
  push:
    branches: [ '**' ]  # Trigger on push to any branch
  pull_request:
    branches: [ main ]   # Trigger on PR to main

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ping-app
  TERRAFORM_VERSION: 1.5.0
  TARGET_ENV: local

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Code Quality Checks
        run: |
          echo "üîç Running code quality checks..."
          black --check app.py
          isort --check-only app.py
          flake8 app.py --count --statistics

      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          PYTHONPATH=. pytest tests/ --cov=app --cov-report=term-missing --verbose

      - name: Code Quality Summary
        run: |
          echo "‚úÖ Code quality checks completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
    # Code Quality Checking and Terraform Validating (runs only on PR to main or push to main)
  ci:
    name: Code Quality Checking and Terraform Validating
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Code Quality Checks
        run: |
          echo "üîç Running code quality checks..."
          black --check app.py
          isort --check-only app.py
          flake8 app.py --count --statistics
  
      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          PYTHONPATH=. pytest tests/ --cov=app --cov-report=term-missing --verbose
  
      - name: Code Quality Summary
        run: |
          echo "‚úÖ Code quality checks completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Validate Infrastructure Code
        run: |
          terraform fmt -check -recursive
          terraform init -backend=false
          terraform validate

      - name: Generate Terraform Plan
        run: |
          echo "üìã Generating Terraform plan..."
          terraform init
          terraform plan -out=tfplan
            
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1
  
   # Manual Approval for the terraform apply infrastructure step
  approval:
    name: Manual Approval for Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      issues: write

    steps:
      - name: Manual Approval Required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}  # Use ${{ steps.generate_token.outputs.token }} for org teams
          approvers: ${{ github.actor }}  # Replace with your GitHub username or Team
          minimum-approvals: 1
          issue-title: "üöÄ Terraform Infrastructure Deployment Approval Required"
          issue-body: |
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Workflow:** ${{ github.workflow }}
            **Triggered by:** ${{ github.actor }}
            
            This deployment will apply Terraform changes to the production infrastructure.
            
            Please review the changes and respond with:
            - **approve** or **lgtm** or **yes** to proceed
            - **deny** or **no** to cancel the deployment
          exclude-workflow-initiator-as-approver: false
          fail-on-denial: true


  # Continuous Deployment
  cd:
    name: Deploy Infrastructure & Application
    runs-on: ubuntu-latest
    needs: approval
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure Docker for Terraform
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Deploy Infrastructure
        run: |
          terraform init
          echo "üöÄ Applying Terraform changes..."
          terraform apply -auto-approve tfplan

      - name: Wait for Services
        run: sleep 30

      - name: Integration Testing
        run: |
          # Test load balancer endpoints
          curl -k https://localhost:8080/health
          curl -k https://localhost:8080/api/ping

      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary:"
          terraform output deployment_summary

  # Cleanup on PR close
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Cleanup PR Resources
        run: |
          echo "Cleaning up PR resources..."
