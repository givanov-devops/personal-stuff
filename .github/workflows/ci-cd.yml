name: Ping Application CI/CD Pipeline

on:
  push:
    branches: ["**"] # Trigger on push to any branch
  pull_request:
    branches: [main] # Trigger on PR to main

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ping-app
  TERRAFORM_VERSION: 1.9.8
  TARGET_ENV: local

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Code Quality Checks
        run: |
          echo "üîç Running code quality checks..."
          black --check app.py
          isort --check-only app.py
          flake8 app.py --count --statistics

      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          PYTHONPATH=. pytest tests/ --cov=app --cov-report=term-missing --verbose

      - name: Code Quality Summary
        run: |
          echo "‚úÖ Code quality checks completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"

  # Code Quality Checking and Terraform Validating (runs only on PR to main or push to main)
  ci:
    name: Code Quality Checking and Terraform Validating
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Code Quality Checks
        run: |
          echo "üîç Running code quality checks..."
          black --check app.py
          isort --check-only app.py
          flake8 app.py --count --statistics

      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          PYTHONPATH=. pytest tests/ --cov=app --cov-report=term-missing --verbose

      - name: Code Quality Summary
        run: |
          echo "‚úÖ Code quality checks completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Validate Infrastructure Code
        run: |
          terraform fmt -check -recursive
          terraform init -backend=false
          terraform validate

      - name: Generate Terraform Plan
        run: |
          echo "üìã Generating Terraform plan..."
          terraform init -backend=false
          terraform plan -out=tfplan
          terraform show -no-color tfplan > tfplan.txt

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            tfplan
            tfplan.txt
          retention-days: 1

  # Manual Approval for the terraform apply infrastructure step
  approval:
    name: Manual Approval for Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      issues: write

    steps:
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Process Terraform Plan
        id: plan
        run: |
          if [ -f tfplan.txt ]; then
            # Extract key information from the plan
            PLAN_CONTENT=$(cat tfplan.txt)
            
            # Extract resources to be created/modified/destroyed
            TO_ADD=$(echo "$PLAN_CONTENT" | grep "will be created" | wc -l)
            TO_CHANGE=$(echo "$PLAN_CONTENT" | grep "will be updated" | wc -l)
            TO_DESTROY=$(echo "$PLAN_CONTENT" | grep "will be destroyed" | wc -l)
            
            # Prepare short summary
            SUMMARY="üìä **Changes Summary:**
            - üü¢ Resources to create: $TO_ADD
            - üü° Resources to modify: $TO_CHANGE  
            - üî¥ Resources to destroy: $TO_DESTROY"
            
            # Get first 50 lines of plan for preview
            PLAN_PREVIEW=$(echo "$PLAN_CONTENT" | head -50)
            
            # Save outputs
            {
              echo "CHANGES_SUMMARY<<EOF"
              echo "$SUMMARY"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
            {
              echo "PLAN_PREVIEW<<EOF"
              echo "$PLAN_PREVIEW"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
            # Full plan (truncated if too long)
            if [ ${#PLAN_CONTENT} -gt 50000 ]; then
              PLAN_CONTENT="${PLAN_CONTENT:0:50000}... 

            [TRUNCATED - View full plan in artifacts]"
            fi
            
            {
              echo "FULL_PLAN<<EOF"
              echo "$PLAN_CONTENT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "CHANGES_SUMMARY=‚ùå Plan file not found" >> $GITHUB_OUTPUT
            echo "PLAN_PREVIEW=Plan file not available" >> $GITHUB_OUTPUT
            echo "FULL_PLAN=Plan file not available" >> $GITHUB_OUTPUT
          fi

      - name: Manual Approval Required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }} # Replace with your GitHub username or Team
          minimum-approvals: 1
          issue-title: "üöÄ Terraform Infrastructure Deployment Approval Required"
          issue-body: |
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Workflow:** ${{ github.workflow }}
            **Triggered by:** ${{ github.actor }}
            **Run ID:** ${{ github.run_id }}

            ---

            ${{ steps.plan.outputs.CHANGES_SUMMARY }}

            ---

            ## üìã Terraform Plan Preview

            <details>
            <summary>üîç Click to view Plan Preview (first 50 lines)</summary>

            ```terraform
            ${{ steps.plan.outputs.PLAN_PREVIEW }}
            ```

            </details>

            <details>
            <summary>üìÑ Click to view Full Terraform Plan</summary>

            ```terraform
            ${{ steps.plan.outputs.FULL_PLAN }}
            ```

            </details>

            ---

            ## üöÄ Approval Instructions

            Please **carefully review** the changes above and respond with:
            - **approve** or **lgtm** or **yes** ‚úÖ to proceed with deployment
            - **deny** or **no** ‚ùå to cancel the deployment

            **‚ö†Ô∏è Warning:** This will make changes to production infrastructure!

            ---

            üìé **Additional Resources:**
            - [üì¶ View Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [üîÑ View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [üìù View Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          exclude-workflow-initiator-as-approver: false
          fail-on-denial: true

  # Continuous Deployment
  cd:
    name: Deploy Infrastructure & Application
    runs-on: ubuntu-latest
    needs: approval
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure Docker for Terraform
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Deploy Infrastructure
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .
      - shell: bash
        run: |
          terraform init -backend=false
          echo "üöÄ Applying Terraform changes..."
          terraform apply -auto-approve tfplan

      - name: Wait for Services
        run: sleep 30

      - name: Integration Testing
        run: |
          # Test load balancer endpoints
          curl -k https://localhost:8080/health
          curl -k https://localhost:8080/api/ping

      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary:"
          terraform output deployment_summary

  # Cleanup on PR close
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Cleanup PR Resources
        run: |
          echo "Cleaning up PR resources..."
